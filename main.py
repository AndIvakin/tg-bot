import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from dotenv import load_dotenv

import storage, calendar_keyboard

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "supersecret")

BOOK_DATE = {}

async def start(u, c):
    kb = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="cmd_book")],
        [InlineKeyboardButton("–ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="cmd_mine")],
        [InlineKeyboardButton("üìû –ê–¥–º–∏–Ω", callback_data="cmd_admin")]
    ]
    await u.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    uid = update.callback_query.from_user.id
    await update.callback_query.answer()

    if data == "cmd_book":
        now = datetime.now()
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard.build_calendar(now.year, now.month))
    elif data.startswith("DAY_"):
        y,m,d = map(int, data[4:].split('-'))
        date = datetime(y,m,d)
        BOOK_DATE[uid] = date
        kb = [
            [InlineKeyboardButton("10:00", callback_data="SLOT_10"), InlineKeyboardButton("11:00", callback_data="SLOT_11")],
            [InlineKeyboardButton("12:00", callback_data="SLOT_12")]
        ]
        await update.callback_query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ {date.date()}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=InlineKeyboardMarkup(kb))
    elif data.startswith("SLOT_"):
        time = data.split("_")[1]
        date = BOOK_DATE.get(uid)
        slot_key = f"{date.date()} {time}:00"
        slots = storage.get_slots()
        if slot_key in slots and slots[slot_key]:
            await update.callback_query.edit_message_text("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.")
        else:
            slots[slot_key] = uid
            storage.save_slots(slots)
            await update.callback_query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {slot_key}")
    elif data == "cmd_mine":
        slots = storage.get_slots()
        mine = [s for s,u_ in slots.items() if u_==uid]
        if not mine:
            await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∏.")
        else:
            kb = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"CAN_{mine[0]}")]]
            await update.callback_query.edit_message_text(f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {mine[0]}", reply_markup=InlineKeyboardMarkup(kb))
    elif data.startswith("CAN_"):
        slot = data[4:]
        slots = storage.get_slots()
        date = datetime.strptime(slot.split()[0], "%Y-%m-%d")
        if date - datetime.now() < timedelta(days=1) and not storage.is_admin(uid):
            await update.callback_query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞ —Å—É—Ç–∫–∏.")
        else:
            slots.pop(slot, None)
            storage.save_slots(slots)
            await update.callback_query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif data == "cmd_admin":
        if storage.is_admin(uid):
            await update.callback_query.edit_message_text("–í—ã —É–∂–µ –∞–¥–º–∏–Ω.")
        else:
            BOOK_DATE[uid] = "ADMIN_LOGIN"
            await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if BOOK_DATE.get(uid) == "ADMIN_LOGIN":
        if update.message.text == ADMIN_PASSWORD:
            storage.add_admin(uid)
            await update.message.reply_text("‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        BOOK_DATE.pop(uid, None)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
